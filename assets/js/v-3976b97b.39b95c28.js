"use strict";(self.webpackChunkalgorithms_way23_ru=self.webpackChunkalgorithms_way23_ru||[]).push([[7284],{502:(a,e,n)=>{n.r(e),n.d(e,{data:()=>t});const t=JSON.parse('{"key":"v-3976b97b","path":"/20221027000223.html","title":"Рекурсия (Recursion)","lang":"ru-RU","frontmatter":{"page_type":"concept"},"excerpt":"","headers":[{"level":2,"title":"Части рекурсивной функции","slug":"части-рекурсивнои-функции","link":"#части-рекурсивнои-функции","children":[]},{"level":2,"title":"Применение рекурсии","slug":"применение-рекурсии","link":"#применение-рекурсии","children":[]},{"level":2,"title":"Ссылки","slug":"ссылки","link":"#ссылки","children":[]},{"level":2,"title":"Ссылки на эту заметку","slug":"ссылки-на-эту-заметку","link":"#ссылки-на-эту-заметку","children":[]}],"git":{"updatedTime":1669660493000},"filePathRelative":"20221027000223.md"}')},1878:(a,e,n)=>{n.r(e),n.d(e,{default:()=>u});var t=n(6252);const s=(0,t.uE)('<h1 id="рекурсия-recursion" tabindex="-1"><a class="header-anchor" href="#рекурсия-recursion" aria-hidden="true">#</a> Рекурсия (Recursion)</h1><p>Рекурсия — вызов функции самой себя.</p><p>Функция может вызывать себя не напрямую, а косвенно через ряд других функций, например, функция <code>A</code> вызывает функцию <code>B</code>, а функция <code>B</code> снова вызывает функцию <code>A</code>.</p>',3),l=(0,t.uE)('<h2 id="части-рекурсивнои-функции" tabindex="-1"><a class="header-anchor" href="#части-рекурсивнои-функции" aria-hidden="true">#</a> Части рекурсивной функции</h2><p>Корректная рекурсивная функция состоит из двух частей: шага рекурсии и условия выхода. Шаг рекурсии — то полезное, что делает функциях, без него функция не имеет смысла. Условия выхода определяет момент когда рекурсивная функция завершится, без него функция будет бесконечно вызывать саму себя.</p><p>Рассмотрим функцию вычисления факториала:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">factorial01</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token number">1</span>\n\n    <span class="token keyword">return</span> n <span class="token operator">*</span> factorial01<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),r=(0,t.uE)('<p><img src="images/recursion01.svg" alt=""></p><h2 id="применение-рекурсии" tabindex="-1"><a class="header-anchor" href="#применение-рекурсии" aria-hidden="true">#</a> Применение рекурсии</h2><p>Рекурсия полезна для задач обработки данных структура которых определена рекурсивно.</p><h2 id="ссылки" tabindex="-1"><a class="header-anchor" href="#ссылки" aria-hidden="true">#</a> Ссылки</h2>',4),i=(0,t._)("h2",{id:"ссылки-на-эту-заметку",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#ссылки-на-эту-заметку","aria-hidden":"true"},"#"),(0,t.Uk)(" Ссылки на эту заметку")],-1),o=(0,t._)("p",{style:{"text-align":"right"}},[(0,t._)("a",{href:"https://github.com/Kverde/algorithms/blob/main/source/20221027000223.md",target:"_blank"}," Эта заметка на GitHub ")],-1),c=(0,t._)("p",{style:{"text-align":"right"}},[(0,t._)("a",{href:"https://discourse.comtext.space/new-topic?title=%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F%20%28Recursion%29&body=&category=algorithm",target:"_blank"}," Обсудить на форуме ")],-1),d={},u=(0,n(3744).Z)(d,[["render",function(a,e){const n=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)("div",null,[s,(0,t._)("p",null,[(0,t.Uk)("Рекурсия возможна, так как каждый вызов функции порождает независимый вычислительный процесс с независимыми данными на "),(0,t.Wm)(n,{to:"/20221027000407.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("стеке вызовов")])),_:1}),(0,t.Uk)(".")]),l,(0,t._)("p",null,[(0,t.Uk)("В начале идет условие выхода (выполненное в виде "),(0,t.Wm)(n,{to:"/20221023132846.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("охранного выражения")])),_:1}),(0,t.Uk)(", а затем шаг рекурсии.")]),r,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(n,{to:"/BhargavaGrokaemAlgoritmy2018.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("Грокаем алгоритмы. Адитья Бхаргава. Питер. 2018")])),_:1}),(0,t.Uk)(". Глава 3. Рекурсия. Рекурсия")]),(0,t._)("li",null,[(0,t.Wm)(n,{to:"/BhargavaGrokaemAlgoritmy2018.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("Грокаем алгоритмы. Адитья Бхаргава. Питер. 2018")])),_:1}),(0,t.Uk)(". Глава 3. Рекурсия. Базовый случай и рекурсивный случай")])]),i,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(n,{to:"/20221027001216.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("Поверхностное и глубокое копирование")])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(n,{to:"/20221027000407.html"},{default:(0,t.w5)((()=>[(0,t.Uk)("Стек вызовов (Call stack)")])),_:1})])]),o,c])}]])}}]);