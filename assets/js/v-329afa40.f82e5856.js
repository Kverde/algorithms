"use strict";(self.webpackChunkalgorithms_way23_ru=self.webpackChunkalgorithms_way23_ru||[]).push([[1900],{8749:(a,s,n)=>{n.r(s),n.d(s,{data:()=>l});const l=JSON.parse('{"key":"v-329afa40","path":"/20221025215226.html","title":"Бинарный поиск (Binary search)","lang":"ru-RU","frontmatter":{"page_type":"algorithm"},"excerpt":"","headers":[{"level":2,"title":"Псевдокод","slug":"псевдокод","link":"#псевдокод","children":[]},{"level":2,"title":"Реализация на Python","slug":"реализация-на-python","link":"#реализация-на-python","children":[]},{"level":2,"title":"Условия","slug":"условия","link":"#условия","children":[]},{"level":2,"title":"Сложность","slug":"сложность","link":"#сложность","children":[]},{"level":2,"title":"Ссылки","slug":"ссылки","link":"#ссылки","children":[]},{"level":2,"title":"Ссылки на эту заметку","slug":"ссылки-на-эту-заметку","link":"#ссылки-на-эту-заметку","children":[]}],"git":{"updatedTime":1669660493000},"filePathRelative":"20221025215226.md"}')},8707:(a,s,n)=>{n.r(s),n.d(s,{default:()=>z});var l=n(6252);const e=(0,l._)("h1",{id:"бинарныи-поиск-binary-search",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#бинарныи-поиск-binary-search","aria-hidden":"true"},"#"),(0,l.Uk)(" Бинарный поиск (Binary search)")],-1),t=(0,l._)("p",null,[(0,l._)("img",{src:"images/binary_search01.svg",alt:""})],-1),i=(0,l._)("p",null,"Применим ту же логику, но сравним искомое число и элемент в середине списка. Если элемент равен искомому числу, то задача решена, но если не равен и искомое число больше элемента из середины, то очевидно, что имеет смысл проверять только вторую половину массива — числа справа от числа которое только что проверили.",-1),p=(0,l._)("p",null,[(0,l._)("img",{src:"images/binary_search02.svg",alt:""})],-1),r=(0,l._)("p",null,"Это и есть основная идея бинарного поиска — проверять не все элементы массива, а использовать отсортированность массива для сокращения количества проверок.",-1),c=(0,l._)("h2",{id:"псевдокод",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#псевдокод","aria-hidden":"true"},"#"),(0,l.Uk)(" Псевдокод")],-1),m=(0,l._)("p",null,"При реализации алгоритма используем две переменные для хранения начального и конечного индекса рассматриваемой области массива. В каждой итерации отсекаем от этой области массива половину пока элемент не будет найден или поисковая область сузится до нуля.",-1),d=(0,l.uE)('<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>алгоритм бинарный_поиск(массив, искомый_элемент)\nначало\n  индекс_начала = 0\n  индекс_конца = последний элемент массива\n  \n  пока индекс_начала &lt;= индекс_конца\n    индекс_середины = находим середину между индекс_начала и индекс_конца\n    если элемент с индексом в середине равен искомому элементу\n      то возвращаем индекс_середины и завершаем алгоритм\n    \n    если элемент с индексом в середине больше искомого\n      то индекс_начала = индекс_середины + 1\n    \n    если элемент с индексом в середине меньше искомого\n      то индекс_конца = индекс_середины - 1\n   \n  возвращаем -1 и завершаем алгоритм \nконец\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="реализация-на-python" tabindex="-1"><a class="header-anchor" href="#реализация-на-python" aria-hidden="true">#</a> Реализация на Python</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token triple-quoted-string string">&quot;&quot;&quot;\n    Функция возвощает индекс элемента item в списке lst\n    или -1 если элемент не найден.\n  &quot;&quot;&quot;</span>\n\n  first <span class="token operator">=</span> <span class="token number">0</span>\n  last <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> \\<span class="token operator">-</span> <span class="token number">1</span>\n  \n  <span class="token keyword">while</span> first <span class="token operator">&lt;=</span> last<span class="token punctuation">:</span>\n    mid <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token punctuation">(</span>last <span class="token operator">-</span> first<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>\n    <span class="token keyword">if</span> lst<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> mid\n\n    <span class="token keyword">if</span> lst<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> item<span class="token punctuation">:</span>\n      first <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n      last <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="условия" tabindex="-1"><a class="header-anchor" href="#условия" aria-hidden="true">#</a> Условия</h2>',4),u=(0,l._)("p",null,[(0,l.Uk)("Второй важный момент — коллекция должна быть с "),(0,l._)("a",{href:"%5B%5B%6020221108225121%60%5D%5D"},"произвольным доступом"),(0,l.Uk)(". Если это требование не будет выполнено, то эффективность бинарного поиска будет меньше возможной.")],-1),o=(0,l._)("h2",{id:"сложность",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#сложность","aria-hidden":"true"},"#"),(0,l.Uk)(" Сложность")],-1),h={class:"katex"},k={class:"katex-mathml"},v=(0,l.uE)('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span>',1),_={class:"katex"},g={class:"katex-mathml"},f=(0,l.uE)('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span>',1),w={class:"katex"},b={class:"katex-mathml"},y=(0,l.uE)('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span>',1),U={class:"katex"},W={class:"katex-mathml"},x=(0,l.uE)('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>',1),D=(0,l._)("h2",{id:"ссылки",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#ссылки","aria-hidden":"true"},"#"),(0,l.Uk)(" Ссылки")],-1),B=(0,l._)("h2",{id:"ссылки-на-эту-заметку",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#ссылки-на-эту-заметку","aria-hidden":"true"},"#"),(0,l.Uk)(" Ссылки на эту заметку")],-1),M=(0,l._)("p",{style:{"text-align":"right"}},[(0,l._)("a",{href:"https://github.com/Kverde/algorithms/blob/main/source/20221025215226.md",target:"_blank"}," Эта заметка на GitHub ")],-1),O=(0,l._)("p",{style:{"text-align":"right"}},[(0,l._)("a",{href:"https://discourse.comtext.space/new-topic?title=%D0%91%D0%B8%D0%BD%D0%B0%D1%80%D0%BD%D1%8B%D0%B9%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%28Binary%20search%29&body=&category=algorithm",target:"_blank"}," Обсудить на форуме ")],-1),q={},z=(0,n(3744).Z)(q,[["render",function(a,s){const n=(0,l.up)("RouterLink"),q=(0,l.up)("mi"),z=(0,l.up)("mn"),E=(0,l.up)("msub"),L=(0,l.up)("mo"),P=(0,l.up)("mrow"),R=(0,l.up)("annotation"),A=(0,l.up)("semantics"),C=(0,l.up)("math");return(0,l.wg)(),(0,l.iD)("div",null,[e,(0,l._)("p",null,[(0,l.Uk)("Алгоритм бинарного поиска находит элемент в отсортированном "),(0,l.Wm)(n,{to:"/20221121230218.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("списке")])),_:1}),(0,l.Uk)(".")]),(0,l._)("p",null,[(0,l.Uk)("Рассмотрим пример. Сравним искомое число и первый элемент "),(0,l.Wm)(n,{to:"/20221121230218.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("списка")])),_:1}),(0,l.Uk)(". Предположим, мы выясняли, что искомое число меньше первого элемента массива. Так как первый элемент массива, если массив отсортирован по возрастанию, является наименьшем, то можно сразу сделать вывод, что искомого числа в массиве нет и просматривать его дальше нет смысла.")]),t,i,p,r,c,m,(0,l._)("p",null,[(0,l.Uk)("Как и в случае "),(0,l.Wm)(n,{to:"/20221023135032.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("линейного поиска")])),_:1}),(0,l.Uk)(", признаком отсутствия элемента в массиве служи число -1.")]),d,(0,l._)("p",null,[(0,l.Uk)("Принципиальное требование для бинарного поиска — сортировка массива. Поэтому бинарный поиск невозможен в неупорядоченных коллекциях с элементами которые нельзя сравнить друг с другом. Если массив неотсортированный то можно использовать только "),(0,l.Wm)(n,{to:"/20221023135032.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("линейный поиск")])),_:1}),(0,l.Uk)(".")]),u,o,(0,l._)("p",null,[(0,l.Uk)("Бинарный поиск, в худшем случае, проверяет только "),(0,l._)("span",h,[(0,l._)("span",k,[(0,l.Wm)(C,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:(0,l.w5)((()=>[(0,l.Wm)(A,null,{default:(0,l.w5)((()=>[(0,l.Wm)(P,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("l")])),_:1}),(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("o")])),_:1}),(0,l.Wm)(E,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("g")])),_:1}),(0,l.Wm)(z,null,{default:(0,l.w5)((()=>[(0,l.Uk)("2")])),_:1})])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)("(")])),_:1}),(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("n")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)(")")])),_:1})])),_:1}),(0,l.Wm)(R,{encoding:"application/x-tex"},{default:(0,l.w5)((()=>[(0,l.Uk)("log_{2}(n)")])),_:1})])),_:1})])),_:1})]),v]),(0,l.Uk)(" элементов, следовательно, сложность тоже будет равна "),(0,l._)("span",_,[(0,l._)("span",g,[(0,l.Wm)(C,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:(0,l.w5)((()=>[(0,l.Wm)(A,null,{default:(0,l.w5)((()=>[(0,l.Wm)(P,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,{mathvariant:"script"},{default:(0,l.w5)((()=>[(0,l.Uk)("O")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)("(")])),_:1}),(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("l")])),_:1}),(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("o")])),_:1}),(0,l.Wm)(E,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("g")])),_:1}),(0,l.Wm)(z,null,{default:(0,l.w5)((()=>[(0,l.Uk)("2")])),_:1})])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)("(")])),_:1}),(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("n")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)(")")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)(")")])),_:1})])),_:1}),(0,l.Wm)(R,{encoding:"application/x-tex"},{default:(0,l.w5)((()=>[(0,l.Uk)("\\mathcal{O}(log_{2}(n))")])),_:1})])),_:1})])),_:1})]),f]),(0,l.Uk)(". Последовательный поиск в несортированном массиве, в худшем случае, проверяет все элементы и его сложность "),(0,l._)("span",w,[(0,l._)("span",b,[(0,l.Wm)(C,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:(0,l.w5)((()=>[(0,l.Wm)(A,null,{default:(0,l.w5)((()=>[(0,l.Wm)(P,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,{mathvariant:"script"},{default:(0,l.w5)((()=>[(0,l.Uk)("O")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)("(")])),_:1}),(0,l.Wm)(q,null,{default:(0,l.w5)((()=>[(0,l.Uk)("n")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)(")")])),_:1})])),_:1}),(0,l.Wm)(R,{encoding:"application/x-tex"},{default:(0,l.w5)((()=>[(0,l.Uk)("\\mathcal{O}(n)")])),_:1})])),_:1})])),_:1})]),y]),(0,l.Uk)(".")]),(0,l._)("p",null,[(0,l.Uk)("Алгоритм не требует дополнительной памяти пропорциональной входному массиву, поэтому его сложность по памяти равна "),(0,l._)("span",U,[(0,l._)("span",W,[(0,l.Wm)(C,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:(0,l.w5)((()=>[(0,l.Wm)(A,null,{default:(0,l.w5)((()=>[(0,l.Wm)(P,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,{mathvariant:"script"},{default:(0,l.w5)((()=>[(0,l.Uk)("O")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)("(")])),_:1}),(0,l.Wm)(z,{mathvariant:"script"},{default:(0,l.w5)((()=>[(0,l.Uk)("1")])),_:1}),(0,l.Wm)(L,{stretchy:"false"},{default:(0,l.w5)((()=>[(0,l.Uk)(")")])),_:1})])),_:1}),(0,l.Wm)(R,{encoding:"application/x-tex"},{default:(0,l.w5)((()=>[(0,l.Uk)("\\mathcal{O(1)}")])),_:1})])),_:1})])),_:1})]),x]),(0,l.Uk)(".")]),D,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(n,{to:"/BhargavaGrokaemAlgoritmy2018.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("Грокаем алгоритмы. Адитья Бхаргава. Питер. 2018")])),_:1}),(0,l.Uk)(". Глава 1. Знакомство с алгоритмами. Бинарный поиск")])]),B,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(n,{to:"/20221023135032.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("Линейный поиск (Linear search)")])),_:1})])]),M,O])}]])}}]);